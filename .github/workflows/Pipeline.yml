name: ColdFusion Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      approve_deployment:
        description: 'Approve deployment'
        required: true
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: windows-latest
    name: Test and Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose build
        
    - name: Run application tests
      run: |
        docker-compose up -d
        Start-Sleep -Seconds 30
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:8555/test.cfm" -TimeoutSec 30
          if ($response.StatusCode -eq 200) {
            Write-Host "Test page accessible"
            Write-Host $response.Content
          } else {
            Write-Error "Test page returned status code: $($response.StatusCode)"
            exit 1
          }
        } catch {
          Write-Error "Failed to access test page: $($_.Exception.Message)"
          exit 1
        } finally {
          docker-compose down
        }

  security-scan:
    runs-on: windows-latest
    name: Security Scan
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: windows-latest
    name: Build and Push to Registry
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  wait-for-approval:
    runs-on: windows-latest
    name: Wait for Approval
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.approve_deployment == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Wait for manual approval
      run: |
        Write-Host "Deployment approved for ${{ github.event.inputs.environment }} environment"
        Write-Host "Triggered by: ${{ github.actor }}"
        Write-Host "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  deploy-staging:
    runs-on: windows-latest
    name: Deploy to Staging
    needs: [build-and-push, wait-for-approval]
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.approve_deployment == 'true')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      run: |
        Write-Host "Deploying to staging server..."
        Write-Host "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        Write-Host "Server: staging-server.company.com"
        
        # Load staging environment variables
        Get-Content env.staging | ForEach-Object {
          if ($_ -match '^([^#][^=]+)=(.*)$') {
            [Environment]::SetEnvironmentVariable($matches[1], $matches[2], 'Process')
          }
        }
        
        # Set GitHub repository for image reference
        $env:GITHUB_REPOSITORY = "${{ github.repository }}"
        
        # Deploy to staging server using docker-compose
        docker-compose -f docker-compose.staging.yml --env-file env.staging down
        docker-compose -f docker-compose.staging.yml --env-file env.staging pull
        docker-compose -f docker-compose.staging.yml --env-file env.staging up -d
        
        Write-Host "Staging deployment completed successfully"
        
    - name: Run smoke tests
      run: |
        Write-Host "Running smoke tests against staging server..."
        Start-Sleep -Seconds 30
        
        try {
          $response = Invoke-WebRequest -Uri "http://staging-server.company.com:8555/test.cfm" -TimeoutSec 30
          if ($response.StatusCode -eq 200) {
            Write-Host "Staging smoke test passed"
            Write-Host $response.Content
          } else {
            Write-Error "Staging smoke test failed with status code: $($response.StatusCode)"
            exit 1
          }
        } catch {
          Write-Error "Staging smoke test failed: $($_.Exception.Message)"
          exit 1
        }

  deploy-production:
    runs-on: windows-latest
    name: Deploy to Production
    needs: [build-and-push, wait-for-approval]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' && github.event.inputs.approve_deployment == 'true')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production server
      run: |
        Write-Host "Deploying to production server..."
        Write-Host "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        Write-Host "Server: production-server.company.com"
        
        # Load production environment variables
        Get-Content env.production | ForEach-Object {
          if ($_ -match '^([^#][^=]+)=(.*)$') {
            [Environment]::SetEnvironmentVariable($matches[1], $matches[2], 'Process')
          }
        }
        
        # Set GitHub repository for image reference
        $env:GITHUB_REPOSITORY = "${{ github.repository }}"
        
        # Deploy to production server using docker-compose
        docker-compose -f docker-compose.production.yml --env-file env.production down
        docker-compose -f docker-compose.production.yml --env-file env.production pull
        docker-compose -f docker-compose.production.yml --env-file env.production up -d
        
        Write-Host "Production deployment completed successfully"
        
    - name: Run health checks
      run: |
        Write-Host "Running health checks against production server..."
        Start-Sleep -Seconds 30
        
        try {
          $response = Invoke-WebRequest -Uri "http://production-server.company.com:8555/test.cfm" -TimeoutSec 30
          if ($response.StatusCode -eq 200) {
            Write-Host "Production health check passed"
            Write-Host $response.Content
          } else {
            Write-Error "Production health check failed with status code: $($response.StatusCode)"
            exit 1
          }
        } catch {
          Write-Error "Production health check failed: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          - Automated deployment from commit ${{ github.sha }}
          - Docker image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          ## Deployment Details
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Workflow: ${{ github.workflow }}
          - Environment: ${{ github.event.inputs.environment || 'auto' }}
          - Triggered by: ${{ github.actor }}
        draft: false
        prerelease: false

  cleanup:
    runs-on: windows-latest
    name: Cleanup
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup Docker resources
      run: |
        Write-Host "Cleaning up Docker resources..."
        docker system prune -f
        docker volume prune -f
        
    - name: Send deployment notification
      if: always()
      run: |
        Write-Host "Sending deployment notification..."
        Write-Host "Deployment Status: ${{ job.status }}"
        Write-Host "Environment: ${{ github.event.inputs.environment || 'auto' }}"
        Write-Host "Triggered by: ${{ github.actor }}"
        # Add notification logic here (Slack, Teams, email, etc.)
