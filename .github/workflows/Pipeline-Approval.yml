name: ColdFusion Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: windows-latest
    name: Test and Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        docker-compose config
        docker-compose build
        
    - name: Run application tests
      run: |
        docker-compose up -d
        Start-Sleep -Seconds 30
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:8555/test.cfm" -TimeoutSec 30
          if ($response.StatusCode -eq 200) {
            Write-Host "Test page accessible"
            Write-Host $response.Content
          } else {
            Write-Error "Test page returned status code: $($response.StatusCode)"
            exit 1
          }
        } catch {
          Write-Error "Failed to access test page: $($_.Exception.Message)"
          exit 1
        } finally {
          docker-compose down
        }

  security-scan:
    runs-on: windows-latest
    name: Security Scan
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: windows-latest
    name: Build and Push to Registry
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: windows-latest
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        Write-Host "Deploying to staging environment..."
        Write-Host "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools
        
    - name: Run smoke tests
      run: |
        Write-Host "Running smoke tests against staging environment..."
        # Add smoke tests here
        # Example: curl tests, health checks, etc.

  deploy-production:
    runs-on: windows-latest
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        Write-Host "Deploying to production environment..."
        Write-Host "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # Add your production deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools
        
    - name: Run health checks
      run: |
        Write-Host "Running health checks against production environment..."
        # Add health checks here
        # Example: curl tests, monitoring checks, etc.
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          - Automated deployment from commit ${{ github.sha }}
          - Docker image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          ## Deployment Details
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Workflow: ${{ github.workflow }}
        draft: false
        prerelease: false

  cleanup:
    runs-on: windows-latest
    name: Cleanup
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup Docker resources
      run: |
        Write-Host "Cleaning up Docker resources..."
        docker system prune -f
        docker volume prune -f
